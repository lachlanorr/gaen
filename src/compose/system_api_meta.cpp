//------------------------------------------------------------------------------
// system_api_meta.cpp - Autogenerated with codegen.py from system_api.h
//
// Gaen Concurrency Engine - http://gaen.org
// Copyright (c) 2014-2019 Lachlan Orr
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
//   1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
//
//   2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
//
//   3. This notice may not be removed or altered from any source
//   distribution.
//------------------------------------------------------------------------------

#include "core/HashMap.h"

#include "compose/compiler_structs.h"

namespace gaen
{

void register_system_apis(ParseData * pParseData)
{
    {
        // register_key_press_listener
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("modeHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("register_key_press_listener", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "register_key_press_listener", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // deregister_key_press_listener
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("modeHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("deregister_key_press_listener", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "deregister_key_press_listener", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_create
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("pAssetHandle", parsedata_find_type_symbol(pParseData, "asset_handle", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("model_create", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_create", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_init_body
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("modelUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("mass", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("friction", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("linearFactor", parsedata_find_type_symbol(pParseData, "vec3", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("angularFactor", parsedata_find_type_symbol(pParseData, "vec3", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("group", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("mask03", parsedata_find_type_symbol(pParseData, "ivec4", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("mask47", parsedata_find_type_symbol(pParseData, "ivec4", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("model_init_body", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_init_body", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_set_velocity
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("modelUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("velocity", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("model_set_velocity", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_set_velocity", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_set_angular_velocity
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("modelUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("velocity", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("model_set_angular_velocity", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_set_angular_velocity", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_show
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_show", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_show", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_hide
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_hide", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_hide", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_hide_all
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        size_t mangledLen = mangle_function_len("model_stage_hide_all", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_hide_all", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_remove
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_remove", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_remove", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_remove_all
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        size_t mangledLen = mangle_function_len("model_stage_remove_all", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_remove_all", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_camera_create_persp
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("fov", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("nearClip", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("farClip", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("view", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_camera_create_persp", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_camera_create_persp", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_camera_create_ortho
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("scale", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("nearClip", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("farClip", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("view", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_camera_create_ortho", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_camera_create_ortho", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_camera_scale
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("cameraUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("scale", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_camera_scale", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_camera_scale", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_camera_view
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("cameraUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("view", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_camera_view", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_camera_view", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_camera_scale_and_view
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("cameraUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("scale", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("view", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_camera_scale_and_view", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_camera_scale_and_view", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_camera_activate
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("cameraUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_camera_activate", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_camera_activate", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // model_stage_camera_remove
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("cameraUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("model_stage_camera_remove", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "model_stage_camera_remove", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_box
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("size", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_box", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_box", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_cone
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("size", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("slices", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_cone", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_cone", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_cylinder
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("size", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("slices", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_cylinder", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_cylinder", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_hex
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("height", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("length", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color0", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color1", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color2", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color3", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color4", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color5", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_hex", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_hex", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_hex
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("height", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("length", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_hex", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_hex", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_hex
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("height", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("length", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color0", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color1", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_hex", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_hex", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_hex
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("height", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("length", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color0", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color1", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color2", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_hex", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_hex", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_sphere
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("size", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("slices", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("sections", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_sphere", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_sphere", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // shape_quad_sphere
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("size", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("sections", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("shape_quad_sphere", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "shape_quad_sphere", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // sprite_create
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("pAssetHandle", parsedata_find_type_symbol(pParseData, "asset_handle", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("passHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("transform", parsedata_find_type_symbol(pParseData, "mat43", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("sprite_create", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "sprite_create", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // sprite_play_anim
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("spriteUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("animHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("duration", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("loop", parsedata_find_type_symbol(pParseData, "bool", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("doneMessage", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("sprite_play_anim", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "sprite_play_anim", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // sprite_set_velocity
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("spriteUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("velocity", parsedata_find_type_symbol(pParseData, "vec2", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("sprite_set_velocity", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "sprite_set_velocity", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // sprite_init_body
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("spriteUid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("mass", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("group", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("mask03", parsedata_find_type_symbol(pParseData, "ivec4", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("mask47", parsedata_find_type_symbol(pParseData, "ivec4", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("sprite_init_body", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "sprite_init_body", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // sprite_stage_show
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("sprite_stage_show", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "sprite_stage_show", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // sprite_stage_hide
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("sprite_stage_hide", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "sprite_stage_hide", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // sprite_stage_remove
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("sprite_stage_remove", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "sprite_stage_remove", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // gen_uid
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        size_t mangledLen = mangle_function_len("gen_uid", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "gen_uid", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "int", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // camera_move
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("uid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("position", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("direction", parsedata_find_type_symbol(pParseData, "quat", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("camera_move", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "camera_move", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // view_look_at
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("position", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("target", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("up", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("view_look_at", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "view_look_at", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "mat43", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // light_insert
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("uid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("stageHash", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("ambient", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("direction", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("light_insert", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "light_insert", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // light_direction
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("uid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("direction", parsedata_find_type_symbol(pParseData, "vec3", 1, 1), pParseData));
        size_t mangledLen = mangle_function_len("light_direction", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "light_direction", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // light_color
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("uid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("color", parsedata_find_type_symbol(pParseData, "color", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("light_color", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "light_color", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // light_ambient
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("uid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        ast_add_child(pSystemApiDef, ast_create_function_arg("ambient", parsedata_find_type_symbol(pParseData, "float", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("light_ambient", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "light_ambient", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }
    {
        // light_remove
        Ast * pSystemApiDef = ast_create(kAST_SystemApiDef, pParseData);
        ast_add_child(pSystemApiDef, ast_create_function_arg("uid", parsedata_find_type_symbol(pParseData, "int", 0, 0), pParseData));
        size_t mangledLen = mangle_function_len("light_remove", pSystemApiDef->pChildren);
        char * mangledName = (char*)COMP_ALLOC(mangledLen + 1);
        mangle_function(mangledName, kMaxCmpId, "light_remove", pSystemApiDef->pChildren);
        parsedata_add_root_symbol(pParseData, symrec_create(kSYMT_SystemApi, parsedata_find_type_symbol(pParseData, "void", 0, 0)->pSymDataType, mangledName, pSystemApiDef, nullptr, pParseData));
    }

}


} // namespace gaen
