#-------------------------------------------------------------------------------
# messages_def.yaml - Message definitions
#
# Gaen Concurrency Engine - http://gaen.org
# Copyright (c) 2014-2019 Lachlan Orr
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#   1. The origin of this software must not be misrepresented; you must not
#   claim that you wrote the original software. If you use this software
#   in a product, an acknowledgment in the product documentation would be
#   appreciated but is not required.
#
#   2. Altered source versions must be plainly marked as such, and must not be
#   misrepresented as being the original software.
#
#   3. This notice may not be removed or altered from any source
#   distribution.
#-------------------------------------------------------------------------------


# Message definitions used to generate cpp Reader and Writer classes.
#
# This is a python file, but shouldn't be used directly, it will be
# consumed when build_messages.py is run.


# A single, 32 byte task
OwnerTask:
  owner:
    type: i32
    type_name: thread_id
    includes:
      - core/threading.h
  task: Task

TaskStatus:
  status:
    type: i32
    type_name: TaskStatus
    includes:
      - engine/Task.h

TaskEntity:
  taskId:
    type: i32
    type_name: task_id
    includes:
      - engine/Task.h
  pEntity:
    type: pointer
    type_name: Entity *
    includes:
      - engine/Entity.h

# Instantiate and insert a component
ComponentIndex:
  nameHash: i32
  index: i32

BoundingBox:
  max: vec3
  min: vec3

# Transform and entity
Transform:
  isLocal: bool
  transform: mat43

PropertyMat43:
  property: u32
  value: mat43

PropertyMat3:
  property: u32
  value: mat3
  property2: u32
  vec: vec2

PropertyVec3:
  property: u32
  value: vec3

# Property watchers and notification
RegisterWatcher:
  message: u32
  property: u32
  uid: u32

NotifyWatcherMat43:
  uid: i32
  value: mat43
  valueType: u32
  property: u32


# Transform and entity
UidTransform:
  uid: i32
  transform: mat43

UidScalarTransform:
  uid: i32
  scalar: f32
  transform: mat43

UidColor:
  uid: i32
  color: Color

UidInteger:
  uid: i32
  integer: i32

UidVec2:
  uid: i32
  vector: vec2

UidVec3:
  uid: i32
  vector: vec3

UidScalar:
  uid: i32
  scalar: f32

LightDistant:
  uid: i32
  stageHash: i32
  direction: vec3
  color: Color
  ambient: f32

SpriteInstance:
  pSpriteInstance:
    type: pointer
    type_name: SpriteInstance *
    includes:
      - render_support/Sprite.h

SpritePlayAnim:
  uid: i32
  animHash: i32
  duration: f32
  loop: bool
  doneMessage: i32

SpriteAnim:
  uid: i32
  animHash: i32
  animFrameIdx: i32

SpriteVelocity:
  uid: i32
  velocity: vec2

SpriteBody:
  uid: i32
  mass: f32
  group: i32
  mask03: ivec4
  mask47: ivec4

ModelInstance:
  pModelInstance:
    type: pointer
    type_name: ModelInstance *
    includes:
      - render_support/Model.h

ModelBody:
  uid: i32
  mass: f32
  friction: f32
  linearFactor: vec3
  angularFactor: vec3
  group: i32
  mask03: ivec4
  mask47: ivec4

CollisionBox:
  uid: i32
  halfExtents: vec3
  transform: mat43

Collision:
  group: i32
  subject: i32
  location: vec3

CameraPersp:
  uid: i32
  stageHash: i32
  fov: f32
  nearClip: f32
  farClip: f32
  view: mat43

CameraOrtho:
  uid: i32
  stageHash: i32
  bounds: f32
  nearClip: f32
  farClip: f32
  view: mat43

MouseMove:
  xDelta: i32
  yDelta: i32

Handle:
  taskId: i32
  nameHash: i32
  pHandle:
    type: pointer
    type_name: Handle *
    includes:
      - engine/Handle.h

Asset:
  taskId: i32
  subTaskId: i32
  nameHash: i32
  pAsset:
    type: pointer
    type_name: Asset *
    includes:
      - engine/Asset.h

KeyPress:
  keys: ivec4

PadInput:
  padId: i32
  codes: i32
  lstick: vec2
  rstick: vec2
  ltrigger: f32
  rtrigger: f32
