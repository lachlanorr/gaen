#ifdef OPENGL3

layout(location = 0) in vec4 vPosition;
layout(location = 1) in vec3 vNormal;
layout(location = 2) in vec4 vColor;

uniform mat4 uMvp;
uniform mat3 uNormal;

uniform vec3 uLight0_Incidence;
uniform vec3 uLight0_Color;
uniform float uLight0_Ambient;

uniform vec3 uLight1_Incidence;
uniform vec3 uLight1_Color;
uniform float uLight1_Ambient;

out vec4 oiColor;

void main()
{
    vec3 normalTrans = normalize(uNormal * vNormal);

    float intensity = max(dot(normalTrans, uLight0_Incidence), 0.0);
    vec3 surfaceColor = intensity * vColor.rgb * uLight0_Color;

    intensity = max(dot(normalTrans, uLight1_Incidence), 0.0);
    surfaceColor += intensity * vColor.rgb * uLight1_Color;

    vec3 ambient = uLight0_Ambient * vColor.rgb * uLight0_Color;
    ambient += uLight1_Ambient * vColor.rgb * uLight1_Color;

    vec3 linearColor = vec3(ambient + surfaceColor);

    const vec3 gamma = vec3(1.0/2.2);

    oiColor = vec4(pow(linearColor, gamma), vColor.a);

    gl_Position = uMvp * vPosition;
};


#else //#ifdef OPENGL3
#ifdef PLATFORM_IOS
precision mediump float;
#endif
attribute vec4 vPosition;
attribute vec3 vNormal;

uniform mat4 uMvp;
uniform mat3 uNormal;
uniform vec4 uColor;
uniform vec3 uLightIncidence;
uniform vec4 uLightColor;

varying vec4 vColor

void main()
{
    vec3 normalTrans = normalize(uNormal * vNormal);
    float intensity = max(dot(normalTrans, uLightIncidence), 0.0);
    intensity += min(intensity + 0.3, 1.0);
    vColor = intensity * uColor;
    gl_Position = mvp * vPosition;
};
#endif //#else //#ifdef OPENGL3
