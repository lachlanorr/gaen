#ifdef OPENGL3

layout(location = 0) in vec4 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec4 color;

uniform mat4 mvp;
uniform mat3 rot;

uniform vec3 light0_incidence;
uniform vec3 light0_color;
uniform float light0_ambient;

uniform vec3 light1_incidence;
uniform vec3 light1_color;
uniform float light1_ambient;

out vec4 oicolor;

void main()
{
    vec3 normalTrans = normalize(rot * normal);

    float intensity = max(dot(normalTrans, light0_incidence), 0.0);
    vec3 surfacecolor = intensity * color.rgb * light0_color;

    intensity = max(dot(normalTrans, light1_incidence), 0.0);
    surfacecolor += intensity * color.rgb * light1_color;

    vec3 ambient = light0_ambient * color.rgb * light0_color;
    ambient += light1_ambient * color.rgb * light1_color;

    vec3 linearcolor = vec3(ambient + surfacecolor);

    const vec3 gamma = vec3(1.0/2.2);

    oicolor = vec4(pow(linearcolor, gamma), color.a);

    gl_Position = mvp * position;
};


#else //#ifdef OPENGL3
#ifdef PLATFORM_IOS
precision mediump float;
#endif
attribute vec4 vPosition;
attribute vec3 normal;

uniform mat4 uMvp;
uniform mat3 rot;
uniform vec4 ucolor;
uniform vec3 lightincidence;
uniform vec4 lightcolor;

varying vec4 color

void main()
{
    vec3 normalTrans = normalize(rot * normal);
    float intensity = max(dot(normalTrans, lightincidence), 0.0);
    intensity += min(intensity + 0.3, 1.0);
    color = intensity * ucolor;
    gl_Position = mvp * vPosition;
};
#endif //#else //#ifdef OPENGL3
