#ifdef OPENGL3

layout(location = 0) in vec4 vPosition;
layout(location = 1) in vec3 vNormal;
layout(location = 2) in vec2 vVertUv;
layout(location = 3) in uint vBoneId;

uniform mat4 uMvp;
uniform mat3 uNormal;

uniform vec3 uLight0_Incidence;
uniform vec3 uLight0_Color;
uniform float uLight0_Ambient;

uniform vec3 uLight1_Incidence;
uniform vec3 uLight1_Color;
uniform float uLight1_Ambient;

uniform sampler2D animations;

out vec2 vFragUv;
out vec3 vLight0;
out vec3 vLight1;
out vec4 colorTemp;

vec2 trans_coords(uint offset)
{
    uvec2 sz = textureSize(animations, 0);
    return vec2((offset % sz.x) / float(sz.x), (offset / sz.x) / float(sz.y));
}

void main()
{
    vec3 normalTrans = normalize(uNormal * vNormal);
    vLight0 = max(dot(normalTrans, uLight0_Incidence), 0.0) * uLight0_Color + uLight0_Ambient * uLight0_Color;
    vLight1 = max(dot(normalTrans, uLight1_Incidence), 0.0) * uLight1_Color + uLight1_Ambient * uLight1_Color;

    vFragUv = vVertUv;

    vec4 anim0 = texture(animations, trans_coords(vBoneId * 3));
    vec4 anim1 = texture(animations, trans_coords(vBoneId * 3 + 1));
    vec4 anim2 = texture(animations, trans_coords(vBoneId * 3 + 2));

    mat4 boneTrans = mat4(vec4(anim0.x, anim0.y, anim0.z, 0),
                         vec4(anim0.w, anim1.x, anim1.y, 0),
                         vec4(anim1.z, anim1.w, anim2.x, 0),
                         vec4(anim2.y, anim2.z, anim2.w, 1));

    gl_Position = uMvp * boneTrans * vPosition;
};


#else //#ifdef OPENGL3
#ifdef PLATFORM_IOS
precision mediump float;
#endif
attribute vec4 vPosition;
attribute vec3 vNormal;

uniform mat4 uMvp;
uniform mat3 uNormal;
uniform vec4 uColor;
uniform vec3 uLightIncidence;
uniform vec4 uLightColor;

varying vec4 vColor

void main()
{
    vec3 normalTrans = normalize(uNormal * vNormal);
    float intensity = max(dot(normalTrans, uLightIncidence), 0.0);
    intensity += min(intensity + 0.3, 1.0);
    vColor = intensity * uColor;
    gl_Position = mvp * vPosition;
};
#endif //#else //#ifdef OPENGL3
