#ifdef OPENGL3

layout(location = 0) in vec4 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 vert_uv;
layout(location = 3) in uint bone_id;

uniform mat4 mvp;
uniform mat3 rot;

uniform uint frame_offset;

uniform vec3 light0_incidence;
uniform vec3 light0_color;
uniform float light0_ambient;

uniform vec3 light1_incidence;
uniform vec3 light1_color;
uniform float light1_ambient;

uniform sampler2D animations;

out vec2 frag_uv;
out vec3 light0;
out vec3 light1;

vec2 trans_coords(uint offset)
{
    uvec2 sz = textureSize(animations, 0);
    return vec2((offset % sz.x) / float(sz.x), (offset / sz.x) / float(sz.y));
}

void main()
{
    vec3 normalTrans = normalize(rot * normal);
    light0 = max(dot(normalTrans, light0_incidence), 0.0) * light0_color + light0_ambient * light0_color;
    light1 = max(dot(normalTrans, light1_incidence), 0.0) * light1_color + light1_ambient * light1_color;

    frag_uv = vert_uv;

    vec4 anim0 = texture(animations, trans_coords(bone_id * 3));
    vec4 anim1 = texture(animations, trans_coords(bone_id * 3 + 1));
    vec4 anim2 = texture(animations, trans_coords(bone_id * 3 + 2));

    mat4 boneTrans = mat4(vec4(anim0.x, anim0.y, anim0.z, 0),
                         vec4(anim0.w, anim1.x, anim1.y, 0),
                         vec4(anim1.z, anim1.w, anim2.x, 0),
                         vec4(anim2.y, anim2.z, anim2.w, 1));

    gl_Position = mvp * boneTrans * position;
};


#else //#ifdef OPENGL3
#ifdef PLATFORM_IOS
precision mediump float;
#endif
attribute vec4 position;
attribute vec3 normal;

uniform mat4 mvp;
uniform mat3 rot;
uniform vec4 ucolor;
uniform vec3 light0_incidence;
uniform vec4 light0_color;

varying vec4 vcolor

void main()
{
    vec3 normalTrans = normalize(rot * normal);
    float intensity = max(dot(normalTrans, light0_incidence), 0.0);
    intensity += min(intensity + 0.3, 1.0);
    vcolor = intensity * ucolor;
    gl_Position = mvp * position;
};
#endif //#else //#ifdef OPENGL3
